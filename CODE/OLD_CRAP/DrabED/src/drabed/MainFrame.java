/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainFrame.java
 *
 * Created on Jan 10, 2012, 11:11:38 AM
 */
package drabed;

import javax.swing.*;
import java.awt.*;
import java.io.*;
import java.net.URLDecoder;

/**
 *
 * @author Stas
 */
public class MainFrame extends javax.swing.JFrame {    
    private TileMap mTileMap;
    private EditorPanel mEditorPanel;
    private String[] mMarkFieldErrorMessage;
    
    private boolean mModifiedSinceSave;
    private File mDoc, mWorkDir;
    
    /** Creates new form MainFrame */
    public MainFrame(TileMap pTileMap)
    {
  
        mTileMap = pTileMap;
        mEditorPanel = new EditorPanel(mTileMap);
        
        mMarkFieldErrorMessage = new String[TileMap.MarkerFieldError.END.ordinal()];
        mMarkFieldErrorMessage[TileMap.MarkerFieldError.ID_TOO_SHORT.ordinal()] = "Unique ID too short!";
        mMarkFieldErrorMessage[TileMap.MarkerFieldError.ID_IN_USE.ordinal()] = "Unique ID in use!";

        initComponents();
        EditorScrollPane.getViewport().add(mEditorPanel, BorderLayout.CENTER);
        
        mModifiedSinceSave = true;
        refreshTitle();
        
        mTileMap.setCommandBufferListener(new CommandBufferListener() {
            public void onAdd(CommandBuffer buff)
            {
                undoMenuItem.setEnabled(true);
                redoMenuItem.setEnabled(false);
                mModifiedSinceSave = true;
                refreshTitle();
            }
            
            public void onUndo(CommandBuffer buff)
            {
                undoMenuItem.setEnabled(buff.canUndo());
                redoMenuItem.setEnabled(true);
                mModifiedSinceSave = true;
                refreshTitle();
            }
            
            public void onRedo(CommandBuffer buff)
            {
                undoMenuItem.setEnabled(true);
                redoMenuItem.setEnabled(buff.canRedo());
                mModifiedSinceSave = true;
                refreshTitle();
            }
            
            public void onClear(CommandBuffer buff)
            {
                undoMenuItem.setEnabled(false);
                redoMenuItem.setEnabled(false);
            }
        });
        
        loadConfig();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
    final void refreshTitle()
    {
        setTitle("TileMap Editor - " + (mDoc != null ? mDoc.getName() : "New Document") + (mModifiedSinceSave ? "*" : ""));
    }
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        toolButtonGroup = new javax.swing.ButtonGroup();
        markOpButtonGroup = new javax.swing.ButtonGroup();
        solOpButtonGroup = new javax.swing.ButtonGroup();
        editButtonGroup = new javax.swing.ButtonGroup();
        editorTabs = new javax.swing.JTabbedPane();
        tileEditorTab = new javax.swing.JPanel();
        EditorScrollPane = new javax.swing.JScrollPane();
        ToolPane = new javax.swing.JPanel();
        penRadioButton = new javax.swing.JRadioButton();
        lineRadioButton = new javax.swing.JRadioButton();
        ellipseRadioButton = new javax.swing.JRadioButton();
        filledEllipseRadioButton = new javax.swing.JRadioButton();
        jSeparator1 = new javax.swing.JSeparator();
        fillerMarkComboBox = new javax.swing.JComboBox();
        markColorPane = new javax.swing.JPanel();
        setMarkRadioButton = new javax.swing.JRadioButton();
        addMarkRadioButton = new javax.swing.JRadioButton();
        removeMarkRadioButton = new javax.swing.JRadioButton();
        clearMarkRadioButton = new javax.swing.JRadioButton();
        jSeparator2 = new javax.swing.JSeparator();
        setSolRadioButton = new javax.swing.JRadioButton();
        clearSolRadioButton = new javax.swing.JRadioButton();
        toggleSolRadioButton = new javax.swing.JRadioButton();
        editEntToggleButton = new javax.swing.JToggleButton();
        editSolToggleButton = new javax.swing.JToggleButton();
        markerEditorTab = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        markJlist = new javax.swing.JList();
        markIdField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        markNameField = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        markDescriptionField = new javax.swing.JTextArea();
        addMarkButton = new javax.swing.JButton();
        deleteMarkButton = new javax.swing.JButton();
        applyMarkButton = new javax.swing.JButton();
        clearMarkButton = new javax.swing.JButton();
        markColorButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        mainMenuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newMenuItem = new javax.swing.JMenuItem();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        quitMenuItem = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        undoMenuItem = new javax.swing.JMenuItem();
        redoMenuItem = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem8 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Editor");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        EditorScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        EditorScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        EditorScrollPane.setViewportBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        EditorScrollPane.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        EditorScrollPane.setDoubleBuffered(true);

        ToolPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        toolButtonGroup.add(penRadioButton);
        penRadioButton.setSelected(true);
        penRadioButton.setText("Pen");
        penRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                penRadioButtonActionPerformed(evt);
            }
        });

        toolButtonGroup.add(lineRadioButton);
        lineRadioButton.setText("Line");
        lineRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lineRadioButtonActionPerformed(evt);
            }
        });

        toolButtonGroup.add(ellipseRadioButton);
        ellipseRadioButton.setText("Ellipse");
        ellipseRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ellipseRadioButtonActionPerformed(evt);
            }
        });

        toolButtonGroup.add(filledEllipseRadioButton);
        filledEllipseRadioButton.setText("Filled Ellipse");
        filledEllipseRadioButton.setToolTipText("");
        filledEllipseRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filledEllipseRadioButtonActionPerformed(evt);
            }
        });

        fillerMarkComboBox.setModel(mTileMap.getComboBoxModel());
        fillerMarkComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fillerMarkComboBoxActionPerformed(evt);
            }
        });

        markColorPane.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout markColorPaneLayout = new javax.swing.GroupLayout(markColorPane);
        markColorPane.setLayout(markColorPaneLayout);
        markColorPaneLayout.setHorizontalGroup(
            markColorPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 19, Short.MAX_VALUE)
        );
        markColorPaneLayout.setVerticalGroup(
            markColorPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 16, Short.MAX_VALUE)
        );

        markOpButtonGroup.add(setMarkRadioButton);
        setMarkRadioButton.setText("Set");
        setMarkRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setMarkRadioButtonActionPerformed(evt);
            }
        });

        markOpButtonGroup.add(addMarkRadioButton);
        addMarkRadioButton.setSelected(true);
        addMarkRadioButton.setText("Add");
        addMarkRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addMarkRadioButtonActionPerformed(evt);
            }
        });

        markOpButtonGroup.add(removeMarkRadioButton);
        removeMarkRadioButton.setText("Remove");
        removeMarkRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeMarkRadioButtonActionPerformed(evt);
            }
        });

        markOpButtonGroup.add(clearMarkRadioButton);
        clearMarkRadioButton.setText("Clear");
        clearMarkRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearMarkRadioButtonActionPerformed(evt);
            }
        });

        solOpButtonGroup.add(setSolRadioButton);
        setSolRadioButton.setSelected(true);
        setSolRadioButton.setText("Set");
        setSolRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setSolRadioButtonActionPerformed(evt);
            }
        });

        solOpButtonGroup.add(clearSolRadioButton);
        clearSolRadioButton.setText("Clear");
        clearSolRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearSolRadioButtonActionPerformed(evt);
            }
        });

        solOpButtonGroup.add(toggleSolRadioButton);
        toggleSolRadioButton.setText("Toggle");
        toggleSolRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggleSolRadioButtonActionPerformed(evt);
            }
        });

        editButtonGroup.add(editEntToggleButton);
        editEntToggleButton.setText("Markers");
        editEntToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editEntToggleButtonActionPerformed(evt);
            }
        });

        editButtonGroup.add(editSolToggleButton);
        editSolToggleButton.setSelected(true);
        editSolToggleButton.setText("Solidity");
        editSolToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editSolToggleButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ToolPaneLayout = new javax.swing.GroupLayout(ToolPane);
        ToolPane.setLayout(ToolPaneLayout);
        ToolPaneLayout.setHorizontalGroup(
            ToolPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ToolPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ToolPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(setMarkRadioButton)
                    .addComponent(removeMarkRadioButton)
                    .addComponent(addMarkRadioButton)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                    .addComponent(penRadioButton)
                    .addComponent(lineRadioButton)
                    .addComponent(ellipseRadioButton)
                    .addComponent(filledEllipseRadioButton)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ToolPaneLayout.createSequentialGroup()
                        .addComponent(markColorPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                        .addComponent(fillerMarkComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(clearMarkRadioButton)
                    .addComponent(setSolRadioButton)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                    .addComponent(clearSolRadioButton)
                    .addComponent(toggleSolRadioButton)
                    .addComponent(editSolToggleButton, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                    .addComponent(editEntToggleButton, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE))
                .addContainerGap())
        );
        ToolPaneLayout.setVerticalGroup(
            ToolPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ToolPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(penRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lineRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ellipseRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filledEllipseRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ToolPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(markColorPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(fillerMarkComboBox))
                .addGap(10, 10, 10)
                .addComponent(addMarkRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(removeMarkRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(setMarkRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(clearMarkRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(editEntToggleButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(setSolRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(clearSolRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(toggleSolRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editSolToggleButton)
                .addContainerGap())
        );

        javax.swing.GroupLayout tileEditorTabLayout = new javax.swing.GroupLayout(tileEditorTab);
        tileEditorTab.setLayout(tileEditorTabLayout);
        tileEditorTabLayout.setHorizontalGroup(
            tileEditorTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tileEditorTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ToolPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(EditorScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 625, Short.MAX_VALUE)
                .addContainerGap())
        );
        tileEditorTabLayout.setVerticalGroup(
            tileEditorTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tileEditorTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tileEditorTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(EditorScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 406, Short.MAX_VALUE)
                    .addComponent(ToolPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        editorTabs.addTab("Tile Editor", tileEditorTab);

        markJlist.setModel(mTileMap.getComboBoxModel());
        markJlist.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        markJlist.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                markJlistValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(markJlist);

        jLabel1.setText("Unique ID:");

        jLabel2.setText("Name:");

        markDescriptionField.setColumns(20);
        markDescriptionField.setRows(5);
        jScrollPane2.setViewportView(markDescriptionField);

        addMarkButton.setText("Add");
        addMarkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addMarkButtonActionPerformed(evt);
            }
        });

        deleteMarkButton.setText("Delete");
        deleteMarkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteMarkButtonActionPerformed(evt);
            }
        });

        applyMarkButton.setText("Apply");
        applyMarkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyMarkButtonActionPerformed(evt);
            }
        });

        clearMarkButton.setText("Clear");
        clearMarkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearMarkButtonActionPerformed(evt);
            }
        });

        markColorButton.setBackground(new java.awt.Color(255, 255, 255));
        markColorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                markColorButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("Description:");

        javax.swing.GroupLayout markerEditorTabLayout = new javax.swing.GroupLayout(markerEditorTab);
        markerEditorTab.setLayout(markerEditorTabLayout);
        markerEditorTabLayout.setHorizontalGroup(
            markerEditorTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(markerEditorTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(markerEditorTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(markerEditorTabLayout.createSequentialGroup()
                        .addGroup(markerEditorTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(markerEditorTabLayout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(markIdField, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(markerEditorTabLayout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(markNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(markColorButton, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(markerEditorTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 464, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(markerEditorTabLayout.createSequentialGroup()
                            .addComponent(addMarkButton)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(applyMarkButton)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(clearMarkButton)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(deleteMarkButton)
                            .addGap(19, 19, 19)))
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        markerEditorTabLayout.setVerticalGroup(
            markerEditorTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(markerEditorTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(markerEditorTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 406, Short.MAX_VALUE)
                    .addGroup(markerEditorTabLayout.createSequentialGroup()
                        .addGroup(markerEditorTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(markerEditorTabLayout.createSequentialGroup()
                                .addGroup(markerEditorTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel1)
                                    .addComponent(markIdField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(6, 6, 6)
                                .addGroup(markerEditorTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2)
                                    .addComponent(markNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(markColorButton, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3)
                        .addGap(4, 4, 4)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(markerEditorTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addMarkButton)
                            .addComponent(applyMarkButton)
                            .addComponent(clearMarkButton)
                            .addComponent(deleteMarkButton))))
                .addContainerGap())
        );

        editorTabs.addTab("Marker Editor", markerEditorTab);

        fileMenu.setText("File");

        newMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        newMenuItem.setText("New");
        fileMenu.add(newMenuItem);

        openMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openMenuItem.setText("Open...");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);

        saveMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveMenuItem.setText("Save");
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        saveAsMenuItem.setText("Save As...");
        saveAsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveAsMenuItem);

        quitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        quitMenuItem.setText("Quit");
        quitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(quitMenuItem);

        mainMenuBar.add(fileMenu);

        jMenu2.setText("Edit");

        undoMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        undoMenuItem.setText("Undo");
        undoMenuItem.setEnabled(false);
        undoMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undoMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(undoMenuItem);

        redoMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_MASK));
        redoMenuItem.setText("Redo");
        redoMenuItem.setEnabled(false);
        redoMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redoMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(redoMenuItem);

        mainMenuBar.add(jMenu2);

        jMenu3.setText("Help");

        jMenuItem8.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        jMenuItem8.setText("About");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem8);

        mainMenuBar.add(jMenu3);

        setJMenuBar(mainMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(editorTabs, javax.swing.GroupLayout.DEFAULT_SIZE, 795, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(editorTabs, javax.swing.GroupLayout.DEFAULT_SIZE, 456, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    void saveConfig()
    {
        try
        {
            new File(System.getProperty("user.home") + "/DrabED/").mkdirs();
            FileOutputStream fout = new FileOutputStream(new File(System.getProperty("user.home") + "/DrabED/config.cfg"));
            DataOutputStream dout = new DataOutputStream(fout);
            if(mWorkDir != null)
                dout.writeUTF(mWorkDir.getAbsolutePath());
            
        } catch (IOException ioe)
        {
            JOptionPane.showMessageDialog(this, "Error saving config.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    final void loadConfig()
    {
        try
        {
            new File(System.getProperty("user.home") + "/DrabED/").mkdirs();
            FileInputStream fin = new FileInputStream(new File(System.getProperty("user.home") + "/DrabED/config.cfg"));
            DataInputStream din = new DataInputStream(fin);
            
            mWorkDir = new File(din.readUTF());
        } catch (IOException ioe)
        {
            //JOptionPane.showMessageDialog(this, "Error loading config.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    void closeApp()
    {

        if (!mModifiedSinceSave ||
            JOptionPane.showConfirmDialog(this, "Quit without saving?", "Warning", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION)
        {
            saveConfig();
            System.exit(0);
        }
    }
    
    public void save(File file)
    {   
        try
        {
            FileOutputStream fout = new FileOutputStream(file);
            DataOutputStream dout = new DataOutputStream(fout);

            mTileMap.write(dout);
            fout.close();
            
            mDoc = file;
            mWorkDir = mDoc.getParentFile();
            mModifiedSinceSave = false;
            refreshTitle();
        }
        
        catch (IOException ioe)
        {
            String cause = (ioe.getCause() != null) ? ioe.getCause().getMessage() : "Cause unknown!";
            JOptionPane.showMessageDialog(this, cause, "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    public void load(File file)
    {

        try
        {
            FileInputStream fin = new FileInputStream(file);
            DataInputStream din = new DataInputStream(fin);

            mTileMap.read(din);
            fin.close();
            
            mDoc = file;
            mWorkDir = mDoc.getParentFile();
            mModifiedSinceSave = false;
            
            refreshTitle();
        }
        
        catch (IOException ioe)
        {
            String cause = (ioe.getCause() != null) ? ioe.getCause().getMessage() : "Invalid file.";
            JOptionPane.showMessageDialog(this, cause, "Error", JOptionPane.ERROR_MESSAGE);
            // RESET STUFF HERE!
        }
    }
    


    
private void setSolRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setSolRadioButtonActionPerformed
// TODO add your handling code here:
    mEditorPanel.tileOp().setSolOp(TileOp.SolOp.SET);
}//GEN-LAST:event_setSolRadioButtonActionPerformed

private void addMarkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addMarkButtonActionPerformed

    TileMap.MarkerFieldError res = mTileMap.addMarker(markIdField.getText(),
                                                      markNameField.getText(),
                                                      markDescriptionField.getText(),
                                                      markColorButton.getBackground());
    if(res != TileMap.MarkerFieldError.NONE)
        JOptionPane.showMessageDialog(this, mMarkFieldErrorMessage[res.ordinal()]);
}//GEN-LAST:event_addMarkButtonActionPerformed

private void markJlistValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_markJlistValueChanged

    if(evt.getValueIsAdjusting() == false && !markJlist.isSelectionEmpty())
    {
        Marker mark = (Marker)markJlist.getSelectedValue();
        markIdField.setText(mark.id());
        markNameField.setText(mark.name());
        markDescriptionField.setText(mark.description());
        
        markColorButton.setBackground(mark.color());
        markColorButton.repaint();
    }
            
}//GEN-LAST:event_markJlistValueChanged

private void applyMarkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyMarkButtonActionPerformed

    if (markJlist.isSelectionEmpty())
        return;

    TileMap.MarkerFieldError res = mTileMap.changeMarker(markJlist.getSelectedIndex(),
            markIdField.getText(),
            markNameField.getText(),
            markDescriptionField.getText(),
            markColorButton.getBackground());

    if (res != TileMap.MarkerFieldError.NONE)
        JOptionPane.showMessageDialog(this, mMarkFieldErrorMessage[res.ordinal()]);
    
    markJlist.repaint();
}//GEN-LAST:event_applyMarkButtonActionPerformed

private void clearMarkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearMarkButtonActionPerformed
// TODO add your handling code here:
    markIdField.setText("");
    markNameField.setText("");
    markDescriptionField.setText("");
}//GEN-LAST:event_clearMarkButtonActionPerformed

private void deleteMarkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteMarkButtonActionPerformed
// TODO add your handling code here:
    if(markJlist.isSelectionEmpty()) return;
    
    
    int i = markJlist.getSelectedIndex();
    mTileMap.removeMarker(i);
    
    i--;
    markJlist.setSelectedIndex(i < 0 ? 0 : i);
}//GEN-LAST:event_deleteMarkButtonActionPerformed

private void penRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_penRadioButtonActionPerformed

    mEditorPanel.setTool(EditorPanel.Tool.PEN);
}//GEN-LAST:event_penRadioButtonActionPerformed

private void lineRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lineRadioButtonActionPerformed
// TODO add your handling code here:
    mEditorPanel.setTool(EditorPanel.Tool.LINE);
}//GEN-LAST:event_lineRadioButtonActionPerformed

private void ellipseRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ellipseRadioButtonActionPerformed
// TODO add your handling code here:
    mEditorPanel.setTool(EditorPanel.Tool.ELLIPSE);
}//GEN-LAST:event_ellipseRadioButtonActionPerformed

private void filledEllipseRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filledEllipseRadioButtonActionPerformed
// TODO add your handling code here:
    mEditorPanel.setTool(EditorPanel.Tool.FILLED_ELLIPSE);
}//GEN-LAST:event_filledEllipseRadioButtonActionPerformed

private void addMarkRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addMarkRadioButtonActionPerformed

    mEditorPanel.tileOp().setEntOp(TileOp.MarkOp.ADD);
}//GEN-LAST:event_addMarkRadioButtonActionPerformed

private void removeMarkRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeMarkRadioButtonActionPerformed

    mEditorPanel.tileOp().setEntOp(TileOp.MarkOp.REMOVE);
}//GEN-LAST:event_removeMarkRadioButtonActionPerformed

private void setMarkRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setMarkRadioButtonActionPerformed

    mEditorPanel.tileOp().setEntOp(TileOp.MarkOp.SET);
}//GEN-LAST:event_setMarkRadioButtonActionPerformed

private void clearMarkRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearMarkRadioButtonActionPerformed
// TODO add your handling code here:
    mEditorPanel.tileOp().setEntOp(TileOp.MarkOp.CLEAR);
}//GEN-LAST:event_clearMarkRadioButtonActionPerformed

private void editEntToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editEntToggleButtonActionPerformed
// TODO add your handling code here:
    mEditorPanel.tileOp().setMode(TileOp.Mode.MARK);
}//GEN-LAST:event_editEntToggleButtonActionPerformed

private void clearSolRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearSolRadioButtonActionPerformed

    mEditorPanel.tileOp().setSolOp(TileOp.SolOp.CLEAR);
}//GEN-LAST:event_clearSolRadioButtonActionPerformed

private void toggleSolRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleSolRadioButtonActionPerformed
// TODO add your handling code here:
    mEditorPanel.tileOp().setSolOp(TileOp.SolOp.TOGGLE);
}//GEN-LAST:event_toggleSolRadioButtonActionPerformed

private void editSolToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editSolToggleButtonActionPerformed
// TODO add your handling code here:
    mEditorPanel.tileOp().setMode(TileOp.Mode.SOL);
}//GEN-LAST:event_editSolToggleButtonActionPerformed

private void markColorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_markColorButtonActionPerformed
// TODO add your handling code here:
    ColorChooserFrame chooser = new ColorChooserFrame();
    chooser.setColor(markColorButton.getBackground());
    chooser.setTarget(new ColorChooserTarget() {

        public void onColorChosen(Color col)
        {
            markColorButton.setBackground(col);
            markColorButton.repaint();
        }
    });
    
    chooser.setVisible(true);
}//GEN-LAST:event_markColorButtonActionPerformed

private void fillerMarkComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fillerMarkComboBoxActionPerformed
// TODO add your handling code here:
    int index = fillerMarkComboBox.getSelectedIndex();
    Marker mark = (Marker)fillerMarkComboBox.getSelectedItem();
    mEditorPanel.tileOp().setMarkIndex(index);
    
    if(mark != null)
        markColorPane.setBackground(mark.color());
    else
        markColorPane.setBackground(new Color(240, 240, 240));
}//GEN-LAST:event_fillerMarkComboBoxActionPerformed

private void saveAsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsMenuItemActionPerformed

    SaveDialog dialog = new SaveDialog();
    if (mWorkDir != null)
        dialog.getFileChooser().setCurrentDirectory(mWorkDir);
    
    dialog.setListener(new SaveDialogListener() {
        public void onSave(File file)
        {
            save(file);
        }
    });
    
    dialog.setVisible(true);
}//GEN-LAST:event_saveAsMenuItemActionPerformed

private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed

    OpenDialog dialog = new OpenDialog();
    if (mWorkDir != null)
        dialog.getFileChooser().setCurrentDirectory(mWorkDir);
    
    dialog.setListener(new OpenDialogListener() {
        public void onOpen(File file)
        {
            load(file);
            EditorScrollPane.repaint();
        }
    });
    
    dialog.setVisible(true);
}//GEN-LAST:event_openMenuItemActionPerformed

private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed

    if(mDoc == null)
        saveAsMenuItemActionPerformed(evt);
    else
        save(mDoc);
}//GEN-LAST:event_saveMenuItemActionPerformed

private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing

    closeApp();
}//GEN-LAST:event_formWindowClosing

private void quitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitMenuItemActionPerformed

    closeApp();
}//GEN-LAST:event_quitMenuItemActionPerformed

private void undoMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoMenuItemActionPerformed

    mTileMap.undo();
    mEditorPanel.repaint();
}//GEN-LAST:event_undoMenuItemActionPerformed

private void redoMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redoMenuItemActionPerformed

    mTileMap.redo();
    mEditorPanel.repaint();
}//GEN-LAST:event_redoMenuItemActionPerformed

private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed

    JOptionPane.showMessageDialog(this, "You are now using my first real Java app. Good luck, and may god have mercy on your soul.", "Warning!", JOptionPane.WARNING_MESSAGE);
}//GEN-LAST:event_jMenuItem8ActionPerformed

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane EditorScrollPane;
    private javax.swing.JPanel ToolPane;
    private javax.swing.JButton addMarkButton;
    private javax.swing.JRadioButton addMarkRadioButton;
    private javax.swing.JButton applyMarkButton;
    private javax.swing.JButton clearMarkButton;
    private javax.swing.JRadioButton clearMarkRadioButton;
    private javax.swing.JRadioButton clearSolRadioButton;
    private javax.swing.JButton deleteMarkButton;
    private javax.swing.ButtonGroup editButtonGroup;
    private javax.swing.JToggleButton editEntToggleButton;
    private javax.swing.JToggleButton editSolToggleButton;
    private javax.swing.JTabbedPane editorTabs;
    private javax.swing.JRadioButton ellipseRadioButton;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JRadioButton filledEllipseRadioButton;
    private javax.swing.JComboBox fillerMarkComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JRadioButton lineRadioButton;
    private javax.swing.JMenuBar mainMenuBar;
    private javax.swing.JButton markColorButton;
    private javax.swing.JPanel markColorPane;
    private javax.swing.JTextArea markDescriptionField;
    private javax.swing.JTextField markIdField;
    private javax.swing.JList markJlist;
    private javax.swing.JTextField markNameField;
    private javax.swing.ButtonGroup markOpButtonGroup;
    private javax.swing.JPanel markerEditorTab;
    private javax.swing.JMenuItem newMenuItem;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JRadioButton penRadioButton;
    private javax.swing.JMenuItem quitMenuItem;
    private javax.swing.JMenuItem redoMenuItem;
    private javax.swing.JRadioButton removeMarkRadioButton;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JRadioButton setMarkRadioButton;
    private javax.swing.JRadioButton setSolRadioButton;
    private javax.swing.ButtonGroup solOpButtonGroup;
    private javax.swing.JPanel tileEditorTab;
    private javax.swing.JRadioButton toggleSolRadioButton;
    private javax.swing.ButtonGroup toolButtonGroup;
    private javax.swing.JMenuItem undoMenuItem;
    // End of variables declaration//GEN-END:variables
}
